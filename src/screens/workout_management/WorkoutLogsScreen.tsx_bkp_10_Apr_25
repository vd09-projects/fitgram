import React, { useEffect, useMemo, useState } from "react";
import { View, Text, StyleSheet, TouchableOpacity, FlatList } from "react-native";
import ScrollableScreen from "../../components/ScrollableScreen";
import SearchableInputDropdown, { DropdownSelection } from "../../components/SearchableInputDropdown";
import { COLORS, FONT_SIZES, SPACING } from "../../constants/styles";
import useWorkoutPlans from "../../hooks/useWorkoutPlans";
import { Exercise, WorkoutPlan } from "../../types/workoutType";

const mockLogs = Array.from({ length: 5 }, (_, i) => ({
      id: `log-${i + 1}`,
      title: `Workout Log ${i + 1}`,
}));

export default function WorkoutLogsScreen() {
      const workoutPlans = useWorkoutPlans(true);

      const convertedWorkoutPlans = useMemo(() =>
            workoutPlans.map((plan) => ({
                  label: plan.name,
                  value: plan,
                  isCustom: false,
            })),
            [workoutPlans]
      );
      const [selectedWorkout, setSelectedWorkout] = useState<DropdownSelection<WorkoutPlan> | undefined>(convertedWorkoutPlans[0]);

      const convertedExercises = useMemo(() => {
            return selectedWorkout?.value?.exercises.map((exercise) => ({
                  label: exercise.name,
                  value: exercise,
                  isCustom: false,
            })) || [];
      }, [selectedWorkout]);
      const [selectedExercises, setSelectedExercises] = useState<DropdownSelection<Exercise> | undefined>(convertedExercises ? convertedExercises[0] : undefined);

      const [selectedSet, setSelectedSet] = useState<string>("All");
      const [isSummaryView, setIsSummaryView] = useState(false);
      const [currentPage, setCurrentPage] = useState(1);

      useEffect(() => {
            if (convertedWorkoutPlans.length > 0 && !selectedWorkout) {
                  setSelectedWorkout(convertedWorkoutPlans[0]);
            }
      });
      useEffect(() => {
            if (convertedExercises && convertedExercises.length > 0) {
                  setSelectedExercises(convertedExercises[0]);
            }
      }, [selectedWorkout]);

      

      return (
            <ScrollableScreen title={<Text style={styles.title}>Workout Logs</Text>}>

                  {/* üîΩ Filters */}
                  <View style={styles.filtersContainer}>
                        <SearchableInputDropdown<WorkoutPlan>
                              placeholder="Select Workout"
                              data={convertedWorkoutPlans}
                              value={selectedWorkout}
                              onChange={setSelectedWorkout}
                              title="Workout Plan"
                              allowCustomInput={false}
                        />

                        {/* Multi-select Exercise Dropdown (to be implemented later) */}
                        <SearchableInputDropdown<Exercise>
                              placeholder="Select Exercises"
                              data={convertedExercises ?? []}
                              value={selectedExercises}
                              onChange={setSelectedExercises}
                              title="Exercises"
                              allowCustomInput={false}
                        />

                        {/* Set Filter Dropdown */}
                        {/* <SearchableInputDropdown
                              placeholder="Select Set"
                              data={["All", "1", "2", "3"].map((s) => ({ label: `Set ${s}`, value: s }))}
                              value={{ label: `Set ${selectedSet}`, value: selectedSet, isCustom: false }}
                              onChange={(item) => setSelectedSet(item?.value || "All")}
                              title="Set Filter"
                        /> */}
                  </View>

                  {/* üìä View Toggle */}
                  {/* <TouchableOpacity onPress={() => setIsSummaryView((prev) => !prev)} style={styles.toggleButton}>
                        <Text style={styles.toggleText}>
                              {isSummaryView ? "üìã Show Detailed Logs" : "üìä Show Summary"}
                        </Text>
                  </TouchableOpacity> */}

                  {/* üìù Log Cards */}
                  {/* <FlatList
                        data={mockLogs}
                        keyExtractor={(item) => item.id}
                        renderItem={({ item }) => (
                              <View style={styles.logCard}>
                                    <Text style={styles.logTitle}>{item.title}</Text>
                                    <Text style={styles.logSubtitle}>[Placeholder for exercises and sets]</Text>
                              </View>
                        )}
                        contentContainerStyle={{ paddingBottom: 100 }}
                  /> */}

                  {/* ‚óÄÔ∏è Pagination ‚ñ∂Ô∏è */}
                  {/* <View style={styles.pagination}>
                        <TouchableOpacity
                              style={[styles.pageButton, currentPage === 1 && styles.disabledButton]}
                              disabled={currentPage === 1}
                              onPress={() => setCurrentPage((p) => Math.max(1, p - 1))}
                        >
                              <Text style={styles.pageButtonText}>Prev</Text>
                        </TouchableOpacity>
                        <Text style={styles.pageText}>Page {currentPage}</Text>
                        <TouchableOpacity
                              style={styles.pageButton}
                              onPress={() => setCurrentPage((p) => p + 1)}
                        >
                              <Text style={styles.pageButtonText}>Next</Text>
                        </TouchableOpacity>
                  </View> */}

            </ScrollableScreen>
      );
}

const styles = StyleSheet.create({
      title: {
            fontSize: FONT_SIZES.xLarge,
            fontWeight: "bold",
            color: COLORS.textPrimary,
            textAlign: "center",
            marginBottom: SPACING.medium,
      },
      filtersContainer: {
            marginBottom: SPACING.medium,
      },
      toggleButton: {
            backgroundColor: COLORS.tertiary,
            padding: SPACING.small,
            borderRadius: 8,
            alignItems: "center",
            marginBottom: SPACING.medium,
      },
      toggleText: {
            fontSize: FONT_SIZES.medium,
            color: COLORS.textSecondary,
      },
      logCard: {
            backgroundColor: COLORS.tertiary,
            padding: SPACING.medium,
            borderRadius: 10,
            marginBottom: SPACING.medium,
      },
      logTitle: {
            fontSize: FONT_SIZES.large,
            fontWeight: "bold",
            color: COLORS.textPrimary,
      },
      logSubtitle: {
            fontSize: FONT_SIZES.small,
            color: COLORS.textSecondary,
            marginTop: 4,
      },
      pagination: {
            flexDirection: "row",
            justifyContent: "space-between",
            alignItems: "center",
            paddingVertical: SPACING.medium,
      },
      pageButton: {
            paddingHorizontal: 16,
            paddingVertical: 10,
            backgroundColor: COLORS.button,
            borderRadius: 6,
      },
      disabledButton: {
            opacity: 0.5,
      },
      pageButtonText: {
            color: COLORS.primary,
            fontWeight: "bold",
      },
      pageText: {
            color: COLORS.textPrimary,
            fontSize: FONT_SIZES.medium,
      },
});